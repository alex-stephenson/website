---
title: Using Shiny to Analyse Strava Data
author: Alex Stephenson
date: '2020-07-01'
slug: shiny_strava
categories: []
tags:
  - shiny
  - dataanalysis
keywords:
  - tech
---

Primarily I have worked with numeric and text data. I wanted to get to grips with working with different data sorts, and especially messy data. With this in mind I started to play around with the data from Strava, a popular app for recording exercise. The data proved to both me extremely messy, and was predominantly .gpx, a data format I hadn't worked with before. Given my thoughts that visualising Strava usage over time might be interesting to not just myself but other strava users, I decided to make this into a Shiny app. 

<!--more-->


I'm going to import and clean the data in one go. .gpx data isn't especially user friendly, so I'm going to write a function to get it in a tidy format. 


```{r}
convertToCommonFormat <- function(df=NA, x=NA, source, file, idx=NA) {
  if (is.na(x)) x <- df[[source]]
  if (is.null(x)) return(
                    tibble(
                      FileName=character(), 
                      Source=character(), 
                      Index=NA_integer_
                    )
                  )
  if (is.data.frame(x)) {
    # Using tibble rather than dataframe simply for ease of printing
    return(
      as_tibble(
        x %>% add_column(
                FileName=file, 
                Source=source, 
                Index=idx, 
                .before=1
              )
      )
    )
  } else if (is.list(x)) {
    return(
      bind_rows(
        lapply(
          1:length(x), 
          function(y) convertToCommonFormat(x=x[[y]], idx=y, file=file, source=source)
        )
      )
    )
  } else {
    print(x)
    stop(paste0("Don't know what to do with ", str(x)))
  }
}

processOneFile <- function(gpxFile) {
  df <- readGPX(gpxFile)
  tracks <- convertToCommonFormat(df, source="tracks", file=gpxFile)
  return(bind_rows(tracks))
}

```




```{r message=F, echo=F}

library(tidyverse)
library(ggmap)
library(XML)
library(raster)
library(sp)
library(plotKML)
library(lubridate)
library(png)
library(ggthemes)
library(grid)
```

```{r message=F, error=F}

tbl_2 <-
    dir(pattern = "*.gpx") %>% 
  map(., ~processOneFile(.))

tbl_joined <- do.call(rbind, tbl_2) %>% 
      as_data_frame()


```


So using our function makes the data pretty accessible:

```{r}
head(tbl_joined)


```

I'm going to use the ```ggmap``` package to plot these Strava routes over time. The first step is to specify the location, and the second plot the routes onto that location.

```{r}

mapImageData <- get_map(location = "London",
                            zoom = 11,
                            color = 'bw',
                            #scale = 1,
                            maptype = "terrain")
    
    ggmap(mapImageData, extent = "device") + # removes axes, etc.
      geom_point(aes(x = lon,
                     y = lat),
                 data = tbl_joined,
                 colour = "red3",
                 alpha = 0.015,
                 size = .1)

```

There you have it! A heatmap (of sorts) of my London cycling routes. 


Now lets visualise some of the trends over time:

```{r message=F, warning=F}



csv_data <- read_csv('activities.csv')

strava_data_clean <- csv_data %>% 
        mutate(elevation_gain = round(`Elevation Gain`, 0),
               distance = round(Distance_1, digits = -2),
               distance_km = Distance_1 / 1000,
               date = dmy_hms(`Activity Date`),
               date = floor_date(date, "1 day")) %>% 
     dplyr::select(-`Activity Date`)
      
      strava_data_clean <- strava_data_clean %>% 
        mutate(cum_total = cumsum(distance_km)) %>% 
        mutate(ride = seq.int(nrow(.))) 
      
      strava_data_clean$days_passed <- as.numeric(strava_data_clean$date - min(strava_data_clean$date)) / 86400
      
      
     strava_data_elevation <- strava_data_clean %>% 
       dplyr::select(`Elevation Gain`, days_passed) %>% 
        na.omit()  %>% 
        mutate(total_elev = cumsum(`Elevation Gain`)) %>% 
        mutate(ride = seq.int(nrow(.)))
      
      strava_data_clean %>% 
        ggplot(aes(ride, cum_total)) +  
        geom_line() + 
        labs(x = "Ride number", y= "Cumulative total in km",
             title = "Cumulative meters cycled") +
        theme_clean() +
        theme(plot.title = element_text(family = "IBM Plex Sans", size = 18))
```


```{r}
      strava_data_elevation %>% 
        ggplot(aes(ride, total_elev)) +
        geom_line() +
        theme_clean() +
        labs(title = "Cumulative meters climbed whilst cycling", x = "Ride number", y = "") +
        theme(plot.title = element_text(family = "IBM Plex Sans", size = 18))
              
```



```{r}

 strava_data_clean %>% 
        dplyr::select(ride, `Average Speed`) %>% 
        na.omit() %>% 
        mutate(avg_speed = `Average Speed` * 3600 / 1000) %>% 
        filter(avg_speed < 40) %>% 
        filter(avg_speed > 10) %>% 
        ggplot(aes(ride, avg_speed)) +
        geom_smooth(method = "lm", se = F) +
       # geom_point() +
        geom_line() +
        theme_clean() +
        labs(title = "Average speed per ride",
             x = "Ride number",
             y = "Average speed (km/h)")+
        theme(plot.title = element_text(family = "IBM Plex Sans", size = 18))
```




I have made the above code into a Shiny app, which would allow users to upload their own data and analyse trends. It hasn't had a ton of development yet so if you come across issues please let me know!
  
  
#<iframe width="1000" height="1100" scrolling="yes" frameborder="yes"  src="https://alex-stephenson.shinyapps.io/strava_shiny_app/"> </iframe>
  


